#include <iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include "plate_locate.h"
#include "opencv2/objdetect/objdetect.hpp"
#include <stdio.h>

using namespace std;
using namespace cv;
using namespace pr;
void testLocate(Mat, vector<Mat>&);

//需要将该xml文件复制到当前工程目录下
string pr_cascade_name = "cascade4.xml";
CascadeClassifier pr_cascade;

void detectAndDisplay(Mat plate, Mat &dst);

int main(int argc,char **argv)
{
	if (!pr_cascade.load(pr_cascade_name)) {
		printf("级联分类器错误，可能未找到文件，拷贝该文件到工程目录下！\n");
		return -1;
	}

	Mat img = imread("E:/cvtest/车牌号/王小明/03/259.jpg");
	Mat result1;
	detectAndDisplay(img, result1);
	//imshow("qweqwe",result1);

	vector<Mat> result;
	testLocate(result1, result);
}

void testLocate(Mat src, vector<Mat>& result){
	CPlateLocate* A = new CPlateLocate;
	A->PlateLocate(src, result);
	delete A;
}

void detectAndDisplay(Mat plate, Mat &dst) {
	std::vector<Rect> plates;
	Mat plate_gray;
	//预处理
	cvtColor(plate, plate_gray, CV_BGR2GRAY); 
	equalizeHist(plate_gray, plate_gray);  
	//检测
	pr_cascade.detectMultiScale(plate_gray, plates, 1.1, 2, 0 | CV_HAAR_SCALE_IMAGE, Size(1, 1));
	//得到分类出来的区域
	for (int i = 0; i < plates.size(); i++) {
		Scalar color = Scalar(0, 0, 255);
		//rectangle(face, cvPoint(plates[i].x, plates[i].y), cvPoint(plates[i].x + plates[i].width, plates[i].y + plates[i].height), color, 2, LINE_8);
		Point center = Point(plates[i].x + plates[i].width*0.5, plates[i].y + plates[i].height*0.5);
		getRectSubPix(plate, plates[i].size(), center, dst, -1);
		//imshow("asd", dst);
		waitKey(0);
	}
}