#include <opencv2/opencv.hpp>
#include <iostream>
#include <math.h>
using namespace cv;
using namespace std;

//图像分割

int main(int argc, char** argv) {
	Mat src,gray_src,sobel_src,threshold_src, dst;
	src = imread("E:/cvtest/车牌号/test1/222.jpg");
	if (!src.data) {
		printf("could find the file!\n");
		return -1;
	}
	//转灰度 模糊
	cvtColor(src,gray_src,CV_BGR2GRAY);
	blur(gray_src,gray_src,Size(5,5));
	//sobel 操作 阈值化
	Sobel(gray_src,sobel_src,CV_8U,1,0,3,1,0);
	threshold(sobel_src, threshold_src,0,255,CV_THRESH_OTSU+CV_THRESH_BINARY);
	//闭操作
	Mat element = getStructuringElement(MORPH_RECT,Size(17,3));
	morphologyEx(threshold_src,threshold_src,CV_MOP_CLOSE,element);
	//找轮廓
	vector<vector<Point>>contours;
	findContours(threshold_src,contours,CV_RETR_EXTERNAL,CV_CHAIN_APPROX_NONE);
	//提取最小矩形区域
	vector<vector<Point>>::iterator itc = contours.begin();
	vector<RotatedRect>rects;
	while(itc != contours.end()) {
		RotatedRect mr = minAreaRect(Mat(*itc));
		if (!verifySizes(mr)) {
			itc = contours.erase(itc);
		}
		else {
			++itc;
			rects.push_back(mr);
		}
	}

	imshow("asd", threshold_src);
	waitKey(0);
	return 0;
}

bool verifySizes(RotatedRect candidate) {
	float error = 0.4;
	const float aspect = 3.14;
	int min = 15 * aspect * 15;
	int max = 125 * aspect * 125;
	float rmin = aspect - aspect * error;
	float rmax = aspect + aspect * error;

	int area = candidate.size.height * candidate.size.width;
	float r = (float)candidate.size.width / (float)candidate.size.height;
	if (r < 1) r = 1 / r;

	if ((area<min || area>max) || (r<min || r>rmax)) {
		return false;
	}
	else {
		return true;
	}
}