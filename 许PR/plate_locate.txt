#include "plate_locate.h"

namespace pr{
	//public
	int CPlateLocate::PlateLocate(cv::Mat &src, std::vector<cv::Mat> &result){
		PlateColorLocate(src, BLUE, result);//蓝色车牌
		PlateColorLocate(src, YELLOW, result);//黄色车牌
		//PlateColorLocate(src, COLOR::WHITE, result);//白色车牌 暂时不用
		
		PlateSobelLocate(src, result);
		return (int)result.size();
	}
	//private
	//利用颜色定位 0：蓝色 1：黄色 2：白色
	void CPlateLocate::PlateColorLocate(cv::Mat &src, int color, std::vector<cv::Mat> &result){
		std::vector<cv::RotatedRect> roRects;
		if (src.empty()){
			return;
		}
		//颜色匹配
		cv::Mat src_color = ColorMatch(src, color, true);
		//Morph
		cv::Mat src_morph;
		MorphPlate(src_color, src_morph, roRects);
		//cv::imshow("morph",src_morph);
		//图像校正：角度校正、偏斜校正
		Revise(src,src_morph, roRects, result);
	}
	//利用sobel定位
	void CPlateLocate::PlateSobelLocate(cv::Mat &src, std::vector<cv::Mat> &result){
		if (src.empty()){
			return;
		}
		std::vector<cv::RotatedRect> roRects;
		int iPlateNum = 0;
		//cv::imshow("source", src);
		//高斯模糊
		cv::Mat src_blur;
		cv::GaussianBlur(src, src_blur, cv::Size(DEFAULT_GAUSSIANBLUR_SIZE, DEFAULT_GAUSSIANBLUR_SIZE), 0);
		//转化灰度
		cv::Mat src_gray;
		cv::cvtColor(src_blur, src_gray, cv::COLOR_BGR2GRAY);
		//sobel算子
		cv::Mat src_sobely;
		cv::Sobel(src_gray, src_sobely, SOBEL_DDEPTH, SOBEL_X_WEIGHT, SOBEL_Y_WEIGHT);
		//二值化
		cv::Mat src_thresh;
		cv::threshold(src_sobely, src_thresh, 0, 255, cv::THRESH_OTSU + cv::THRESH_BINARY);
		cv::Mat src_morph;
		MorphPlate(src_thresh, src_morph, roRects);
		//cv::imshow("thresh", src_thresh);
		//cv::imshow("morph", src_morph);
		Revise(src, src_morph, roRects, result);
	}
	//验证矩形大小是否为车牌
	bool CPlateLocate::RectVerify(cv::RotatedRect &rRect){
		//验证旋转角度
		float angle = rRect.size.width > rRect.size.height ? abs(rRect.angle) : abs(rRect.angle) + 90;
		if (angle > DEFAULT_ANGLE&&angle < 180 - DEFAULT_ANGLE)return false;
		//验证长宽比例
		float width = MAX(rRect.size.width, rRect.size.height);
		float height = MIN(rRect.size.width, rRect.size.height);
		float scale = width / height;
		//中国车牌长：宽=440：140=3.14
		double minScale = 3.14*(100 - DEFAULT_ERROR_SCALE)/100;
		double maxScale = 3.14*(100 + DEFAULT_ERROR_SCALE)/100;
		if (scale<minScale || scale>maxScale)return false;
		//面积条件 不靠谱
		//float min = 44 * 14 * (100 - DEFAULT_ERROR_SCALE) / 100;
		//float max = 44 * 14 * (100 + DEFAULT_ERROR_SCALE) / 100;
		float min = 44 * 14 * 1;
		float max = 44 * 14 * 30;
		float area = width*height;
		if (area>max || area < min)return false;
		return true;
	}
	//匹配颜色 0：蓝色 1：黄色 2：白色
	cv::Mat CPlateLocate::ColorMatch(cv::Mat &src,int r,bool adaptive_minsv) {

		// if use adaptive_minsv
		// min value of s and v is adaptive to h

		const float max_sv = 255;
		const float minref_sv = 64;

		const float minabs_sv = 95;

		// H range of blue 

		const int min_blue = 100;  // 100
		const int max_blue = 140;  // 140

		// H range of yellow

		const int min_yellow = 15;  // 15
		const int max_yellow = 40;  // 40

		// H range of white

		const int min_white = 0;   // 15
		const int max_white = 30;  // 40

		cv::Mat src_hsv;

		//转化到hsv空间
		cvtColor(src, src_hsv, CV_BGR2HSV);

		std::vector<cv::Mat> hsvSplit;
		//分离 直方图均衡化 融合
		split(src_hsv, hsvSplit);
		equalizeHist(hsvSplit[2], hsvSplit[2]);
		merge(hsvSplit, src_hsv);

		// match to find the color

		int min_h = 0;
		int max_h = 0;
		switch (r) {
		case 0://blue
			min_h = min_blue;
			max_h = max_blue;
			break;
		case 1://yellow
			min_h = min_yellow;
			max_h = max_yellow;
			break;
		case 2://white
			min_h = min_white;
			max_h = max_white;
			break;
		default:
			// Color::UNKNOWN
			break;
		}

		float diff_h = float((max_h - min_h) / 2);
		float avg_h = min_h + diff_h;

		int channels = src_hsv.channels();
		int nRows = src_hsv.rows;

		// 考虑多通道图像
		int nCols = src_hsv.cols * channels;
		if (src_hsv.isContinuous()) {
			nCols *= nRows;
			nRows = 1;
		}

		int i, j;
		uchar* p;
		float s_all = 0;
		float v_all = 0;
		float count = 0;
		for (i = 0; i < nRows; ++i) {
			p = src_hsv.ptr<uchar>(i);
			for (j = 0; j < nCols; j += 3) {
				int H = int(p[j]);      // 0-180
				int S = int(p[j + 1]);  // 0-255
				int V = int(p[j + 2]);  // 0-255

				s_all += S;
				v_all += V;
				count++;

				bool colorMatched = false;

				if (H > min_h && H < max_h) {
					float Hdiff = 0;
					if (H > avg_h)
						Hdiff = H - avg_h;
					else
						Hdiff = avg_h - H;

					float Hdiff_p = float(Hdiff) / diff_h;

					float min_sv = 0;
					if (true == adaptive_minsv)
						min_sv =
						minref_sv -
						minref_sv / 2 *(1-Hdiff_p);  // inref_sv - minref_sv / 2 * (1 - Hdiff_p)
					else
						min_sv = minabs_sv;  // add

						if ((S > min_sv && S < max_sv) && (V > min_sv && V < max_sv))
							colorMatched = true;
				}

				if (colorMatched == true) {
					p[j] = 0;
					p[j + 1] = 0;
					p[j + 2] = 255;
				}
				else {
					p[j] = 0;
					p[j + 1] = 0;
					p[j + 2] = 0;
				}
			}
		}

		// cout << "avg_s:" << s_all / count << endl;
		// cout << "avg_v:" << v_all / count << endl;

		// get the final binary

		std::vector<cv::Mat> hsvSplit_done;
		split(src_hsv, hsvSplit_done);

		return hsvSplit_done[2];
	}
	//形态学 最小外接矩形
	void CPlateLocate::MorphPlate(cv::Mat &src, cv::Mat &dst, std::vector<cv::RotatedRect> &result){
		//闭运算
		cv::Mat element = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(DEFAULT_MORPH_SIZE_WIDTH, DEFAULT_MORPH_SIZE_HEIGHT));
		cv::Mat src_morph;
		cv::morphologyEx(src, src_morph, cv::MORPH_CLOSE, element);
		//开运算
		element = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(5, 5));
		cv::morphologyEx(src_morph, src_morph, cv::MORPH_ERODE, element);
		cv::morphologyEx(src_morph, src_morph, cv::MORPH_DILATE, element);
		src_morph.copyTo(dst);
		//取轮廓
		std::vector<std::vector<cv::Point> > contours;
		cv::findContours(src_morph, contours, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_NONE);
		if (contours.size() <= 0){
			return;
		}
		//最小外接矩形
		std::vector<cv::RotatedRect> rects;
		for (int i = 0; i < contours.size(); i++){
			cv::RotatedRect roRect = cv::minAreaRect(contours[i]);
			cv::Rect roiRect;
			if (RectVerify(roRect)){
				result.push_back(roRect);
			}
		}
	}
	//得到不越界矩形
	bool CPlateLocate::SafeRect(cv::RotatedRect rRect, cv::Mat &src, cv::Rect &rect){
		cv::Rect boundRect = rRect.boundingRect();
		int t1_x = boundRect.x>0 ? boundRect.x : 0;
		int t1_y = boundRect.y > 0 ? boundRect.y : 0;

		int br_x = boundRect.x + boundRect.width < src.cols ? boundRect.x + boundRect.width - 1 : src.cols - 1;
		int br_y = boundRect.y + boundRect.height < src.rows ? boundRect.y + boundRect.height - 1 : src.rows - 1;

		int width = br_x - t1_x;
		int height = br_y - t1_y;

		if (width < 0 || height < 0)return false;
		rect = cv::Rect(t1_x, t1_y, width, height);
		return true;
	}
	//旋转
	void CPlateLocate::Rotation(cv::Mat &src, cv::Mat &src_crop, cv::RotatedRect &roiRect, double angle){
		cv::Mat srcLarge = cv::Mat::zeros(src.rows * 2, src.cols * 2, src.type());
		//原图像在放大之后的位置
		int x = (srcLarge.cols - src.cols) / 2;
		int y = (srcLarge.rows - src.rows) / 2;
		int width = src.cols;
		int height = src.rows;

		cv::Mat imgRoi = srcLarge(cv::Rect(x, y, width, height));
		cv::addWeighted(imgRoi, 0, src, 1, 0, imgRoi);
		cv::Point2f center(srcLarge.cols / 2.f, srcLarge.rows / 2.f);
		cv::Mat rMatrix = cv::getRotationMatrix2D(center, angle, 1);
		cv::Mat dst;
		cv::warpAffine(srcLarge, dst, rMatrix, srcLarge.size(), cv::INTER_CUBIC);
		int roiWidth = (int)MAX(roiRect.size.height, roiRect.size.width);
		int roiHeight = (int)MIN(roiRect.size.height, roiRect.size.width);
		cv::getRectSubPix(dst, cv::Size(roiWidth,roiHeight), center, src_crop);
	}
	//抗偏斜
	void CPlateLocate::Deflect(cv::Mat &src, double slope){
		//原始点
		cv::Point2f srcPoint[3];
		//目标点
		cv::Point2f tarPoint[3];
		if (slope < 0){
			//左上角
			srcPoint[0] = cv::Point2f(0, 0);
			//右上角
			float p2Y = 0;
			float p2X = (float)(src.cols + slope*src.rows);
			srcPoint[1] = cv::Point2f(p2X, p2Y);
			//左下角
			float p3Y = (float)src.rows;
			float p3X = (float)(-src.rows * slope);
			srcPoint[2] = cv::Point2f(p3X, p3Y);

			//
			tarPoint[0] = cv::Point2f(0, 0);
			tarPoint[1] = cv::Point2f((float)src.cols, 0);
			tarPoint[2] = cv::Point2f(0, (float)src.rows);
		}
		else{
			//左上角
			float p1Y = 0;
			float p1X = (float)slope*src.rows;
			srcPoint[0] = cv::Point2f(p1X, p1Y);
			//右上角
			srcPoint[1] = cv::Point2f((float)src.cols, 0);
			//右下角
			float p3Y = (float)src.rows;
			float p3X = (float)(src.cols - slope*src.rows);
			srcPoint[2] = cv::Point2f(p3X, p3Y);
			//
			tarPoint[0] = cv::Point2f(0, 0);
			tarPoint[1] = cv::Point2f((float)src.cols, 0);
			tarPoint[2] = cv::Point2f((float)src.cols, (float)src.rows);
		}
		cv::Mat matrix=cv::getAffineTransform(srcPoint, tarPoint);
		cv::warpAffine(src, src, matrix, src.size());
		
	}
	//角度校正
	void CPlateLocate::Revise(cv::Mat &src, cv::Mat &morph, std::vector<cv::RotatedRect> &roRects, std::vector<cv::Mat> &result){
		for (int i = 0; i < roRects.size(); i++){
			//角度校正
			cv::Rect roiRect;
			if (!SafeRect(roRects[i], src, roiRect))continue;
			double angle = roRects[i].size.width > roRects[i].size.height ? roRects[i].angle : roRects[i].angle + 90;
			cv::Mat dstSrc;
			cv::Mat roiSrc=src(roiRect);
			Rotation(roiSrc, dstSrc, roRects[i], angle);
			cv::Mat dstMorph;
			cv::Mat roiMorph=morph(roiRect);
			Rotation(roiMorph, dstMorph, roRects[i], angle);
			//偏斜校正
			//计算斜率
			int num = 0;
			int rows = 0;
			int beforeCount = -1;
			for (int y = dstMorph.rows - 1; y >= 0; y--){
				int currentCount = 0;
				int whiteCount = 0;
				//计算当前行白色点数
				for (int x = 0; x < dstMorph.cols; x++)if (dstMorph.at<uchar>(y, x) == 255)whiteCount++;
				//如果白色点数不达标，说明是二值化时影响，不作为物体
				if (whiteCount < (dstMorph.cols / 2))continue;
				//计算白色到外接矩形左边距离
				for (int x = 0; x < dstMorph.cols; x++){
					if (dstMorph.at<uchar>(y, x) == 0)currentCount++;
					else break;
				}
				//如果距离太长 则丢弃
				if (currentCount >(dstMorph.cols / 2))continue;
				if (beforeCount == -1)beforeCount = currentCount;
				int differ = abs(currentCount - beforeCount);
				//可能是坑或者突出
				if (differ < 3 && currentCount != beforeCount)
					num += currentCount - beforeCount;
				rows++;
				beforeCount = currentCount;
			}
			//斜率校正
			//统计行数太少则可能是局部偏斜，不校正。
			int height = (float)MIN(roRects[i].size.height, roRects[i].size.width) / 2;
			if (rows != 0 && rows >height){
				double slope = (float)num / rows;
				//偏斜太小不校正
				if (abs(slope) > 0.1){
					Deflect(dstSrc, slope);
					//Deflect(dstMorph, slope);
				}
			}
			//cv::imshow("deflect", dstSrc);
			result.push_back(dstSrc);
			if (dstSrc.rows > 36 || dstSrc.cols > 136){
				cv::resize(dstSrc, dstSrc, cv::Size(136, 36), 0, 0, cv::INTER_AREA);
				cv::resize(dstMorph, dstMorph, cv::Size(136, 36), 0, 0, cv::INTER_AREA);
			}
			else{
				cv::resize(dstSrc, dstSrc, cv::Size(136, 36), 0, 0, cv::INTER_CUBIC);
				cv::resize(dstMorph, dstMorph, cv::Size(136, 36), 0, 0, cv::INTER_CUBIC);
			}
			cv::imshow("plate", dstSrc);
			cv::waitKey(0);
			cv::destroyAllWindows();
		}
	}
}
